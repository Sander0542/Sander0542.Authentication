name: 'Publish Packages'

on:
  push:
    branches:
      - main
    tags:
      - v*
env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  MSBUILDSINGLELOADCONTEXT: 1

jobs:
  generateVersionInfo:
    name: 'GenerateVersionInfo'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: 'Restore dotnet tools'
        run: dotnet tool restore
      - name: 'Generate version info from git history'
        run: dotnet gitversion /output json | jq -r 'to_entries|map("GitVersion_\(.key)=\(.value|tostring)")|.[]' >> gitversion.env && cat gitversion.env
      - name: 'Upload version info file'
        uses: actions/upload-artifact@v1
        with:
          name: gitversion
          path: gitversion.env

  build:
    name: 'Build'
    needs: generateVersionInfo
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Download version info file'
        uses: actions/download-artifact@v1
        with:
          name: gitversion
          path: ./
      - name: 'Inject version info into environment'
        run: cat ./gitversion.env >> $GITHUB_ENV
      - name: 'Build solution'
        run: echo "Current version is \"$GitVersion_SemVer\"" && dotnet build -c Release
      - name: 'Create NuGet packages'
        run: dotnet pack -c Release --no-build -o nupkg
      - name: 'Upload nuget packages'
        uses: actions/upload-artifact@v1
        with:
          name: nupkg
          path: nupkg

  test:
    name: 'Test'
    needs: [ build, generateVersionInfo ]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Download version info file'
        uses: actions/download-artifact@v1
        with:
          name: gitversion
          path: ./
      - name: 'Inject version info into environment'
        run: cat ./gitversion.env >> $GITHUB_ENV
      - name: 'Run tests'
        run: echo "Current version is \"$GitVersion_SemVer\"" && dotnet test -c Release

  publish:
    name: 'Publish'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Download nuget packages'
        uses: actions/download-artifact@v1
        with:
          name: nupkg
      - name: 'Publish the package to Nuget.org'
        if: startsWith(github.ref, 'refs/tags/v')
        run: dotnet nuget push "./nupkg/*.nupkg" --source https://api.nuget.org/v3/index.json --api-key "${{ secrets.NUGET_API_KEY }}" --skip-duplicate --no-symbols true
      - name: 'Publish the package to GitHub Packages'
        run: dotnet nuget push "./nupkg/*.nupkg" --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --api-key "${{ secrets.GITHUB_TOKEN }}" --skip-duplicate --no-symbols true